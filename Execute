#Execute a ML model training pipeline
DVC pipelines are used to ensure reproducibility in your project.

In this exercise, you will build on the learnings of creating a pipeline in the dvc.yaml file and
 execute the steps to train a machine-learning model using a structured approach. Your task is to 
 execute different variants of dvc repro command to understand the nuances of it.

Instructions
0XP
Execute a dry run of the pipeline. Understand the steps and execution order.
Execute only the preprocessing stage of the pipeline that is specified under preprocess block in dvc.yaml. Observe changes to the dvc.lock file.
dvc repro preprocess
Execute only the training/evaluation stage of the pipeline that is specified under train_and_evaluate block in dvc.yaml. Observe changes to the dvc.lock file.
dvc repro train_and_evaluate
Execute the entire DVC pipeline. Notice how the caching in DVC skips the actual execution of the steps.
To run the entire pipeline, run dvc repro on the terminal.

# Tracking DVC Metrics

DVC pipelines are employed to guarantee the reproducibility of your project.

In this exercise, you will expand on your knowledge of constructing a pipeline in the dvc.yaml file and carry out the 
steps to train a machine learning model in a systematic manner. Your assignment involves executing various forms of 
the dvc metrics command to comprehend its subtleties. We have already run the pipeline once and committed the metrics 
file to Git.

Instructions
100XP
Print the current metrics by running appropriate dvc metrics subcommand.
Change n_estimators to 3 in line 20 of opened params.yaml file.
Execute the DVC pipeline.
Compare the changed metrics with the previous run using appropriate dvc metrics subcommand.


# Adding plots to dvc.yaml
In this exercise, you are tasked to fill in the dvc.yaml file that outlines a model training process.

The files preprocess_dataset.py and train_and_evaluate.py are responsible for data preprocessing and model training/evaluation respectively, 
using weather.csv from the raw_dataset folder as input. The output of the model training code is the predictions.csv file, which includes 
the predictions and the actual values from the test dataset, and a metrics.json file that holds structured metrics data. The predictions.csv 
file will be utilized to create a confusion matrix plot.


Instructions

Set the plot target to the output file containing predictions data.
Set the plot template to confusion to plot the confusion matrix.
Set the correct value for cache key to track plots in Git repository instead of DVC remote.
Execute the pipeline and then run dvc plots show. This should generate a file dvc_plots/index.html.
